#include <string>

std::string usage = 
"#rotate\n"
"Use case:\n"
"	<app-name> rotate <filename> [args..]\n"
"	-o <string> : output image name (default = \"out.bmp\")\n"
"\n"
"	-degree <integer>: integer of degree to turn the image.(default = 0)\n" 
"			+ positive : turn left\n"
"			+ negative : turn right\n"
"\n"
"	-l : rotate 90 degree to left\n"
"\n"
"	-r : rotate 90 degree to right\n"
"\n"
"	-d : rotate 180 degree\n" 
"\n"
"#flip\n"
"Use case:\n"
"	<app-name> flip <filename> [args..]\n"
"	-o <string> : output image name (default = \"out.bmp\")\n"
"\n"
"	-h : flip horizontal\n"
"\n"
"	-v : flip vertical\n"
"\n"
"#crop\n"
"Use case:\n"
"	<app-name> crop <filename> [args..]\n"
"	-o <string> : output image name (default = \"out.bmp\")\n"
"\n"
"	Define top, bottom, left, right of a box which you want to crop\n"
"	-t <double> : a number between 0.0 (downmost) and 1.0 (topmost). (default = 1.0)\n"
"	-b <double> : a number between 0.0 (downmost) and 1.0 (topmost). (default = 0.0)\n"
"\n"
"	-r <double> : a number between 0.0 (leftmost) and 1.0 (rightmost). (default = 1.0)\n"
"	-l <double> : a number between 0.0 (leftmost) and 1.0 (rightmost). (default = 0.0)\n"
"\n"
"#scale\n"
"Use case:\n"
"	<app-name> scale <filename> [args..]\n"
"	-o <string> : output image name (default = \"out.bmp\")\n"
"\n"
"	-f <double> : factor\n"
"\n"
"#resize\n"
"Use case:\n"
"	<app-name> resize <filename> [args..]\n"
"	-o <string> : output image name (default = \"out.bmp\")\n"
"\n"
"	-w <integer> : resize width. (default = original width)\n"
"	-h <integer> : resize height. (default = original height)\n"
"\n"
"#sobel\n"
"Use case:\n"
"	<app-name> sobel <filename> [args..]\n"
"	-o <string> : output image name (default = \"out.bmp\")\n"""
"\n"
"#robert\n"
"Use case:\n"
"	<app-name> robert <filename> [args..]\n"
"	-o <string> : output image name (default = \"out.bmp\")\n"
"\n"
"#prewitt\n"
"Use case:\n"
"	<app-name> prewitt <filename> [args..]\n"
"	-o <string> : output image name (default = \"out.bmp\")\n"
"\n"
"#laplacian\n"
"Use case:\n"
"	<app-name> laplacian <filename> [args..]\n"
"	-o <string> : output image name (default = \"out.bmp\")\n"
"\n"
"#kirsch\n"
"Use case:\n"
"	<app-name> kirsch <filename> [args..]\n"
"	-o <string> : output image name (default = \"out.bmp\")\n"
"	-dir <string> : choose direction to detect edge.\n"
"	  			Can choose \"north\" \"north_west\" \"west\" \"west_south\" \"south\" \"south_east\" \"east\" \"east_north\"\n"
"\n"
"#blur\n"
"Use case:\n"
"	<app-name> blur <filename> [args..]\n"
"	-o <string> : output image name (default = \"out.bmp\")\n"
"	-m : medium blur (default option)\n"
"\n"
"	-g : gaussian blur\n"
"		-sigma <double> : blur variance (default = 2.0)\n"
"\n"
"	-r <integer> : blur radius (default = 1)\n"
"\n"
"#contrast\n"
"Use case:\n"
"	<app-name> contrast <filename> [args..]\n"
"	-o : output image name (default = \"out.bmp\")\n"
"\n"
"	-v <interger> : contrast value, from -255 to 255. (Defaut = 0 / No change)\n"
"\n"
"#exposure\n"
"Use case:\n"
"	<app-name> exposure <filename> [args..]\n"
"	-o : output image name (default = \"out.bmp\")\n"
"	-v <double> : adjust value (defaut = 0)\n"
"\n"
"#grayscale\n"
"Use case:\n"
"	<app-name> grayscale <filename> [args..]\n"
"	-o : output image name (default = \"out.bmp\")\n"
"\n"
"	-hold <string> : don't grayscale a color.\n"
"			 Any in one of these value: \"red\", \"yellow\", \"green\", \"blue\", \"purple\"\n"
"\n"
"#levels\n"
"Use case:\n"
"	<app-name> levels <filename> [args..]\n"
"	-o : output image name (default = \"out.bmp\")\n"
"\n"
"	-s <interger>: shadow value (default = 0)\n"
"	-m <interger>: midtone value (default = 128)\n"
"	-h <interger>: highlight value (default = 255)\n"
"	-os <interger>: output shadow value (default = 0)\n"
"	-oh <interger>: output highlight value (default = 255)\n"
"	 (All range from (0 - 255)\n"
"\n"
"#nearest\n"
"Use case:\n"
"	<app-name> nearest <filename> [args..]\n"
"	-o : output image name (default = \"out.bmp\") \n"
"\n"
"	-c <string> : string include characters of the colours.\n"
"\n"
"	Supported values: \"r\" for red, \"o\" for orange, \"y\" for yellow, \"g\" for green,\n"
"				\"b\" for blue, \"i\" for indigo, \"p\" for purple, \"d\" for black and \"w\" for white.\n"
"\n"
"	Example: - if you want the input colors to be red yellow and white, type -c ryw.\n"
"		- if you want input colors to be black and white, type -c dw\n"
"\n"
"#diffuse\n"
"Use case:\n"
"	<app-name> diffuse <filename> [args..]\n"
"	-o : output image name (default = \"out.bmp\")\n"
"\n"
"	-c <string> : string include characters of the colours.\n"
"\n"
"	Supported values: \"r\" for red, \"o\" for orange, \"y\" for yellow, \"g\" for green,\n"
"			\"b\" for blue, \"i\" for indigo, \"p\" for purple, \"d\" for black and \"w\" for white.\n"
"\n"
"	Example: - if you want the input colors to be red yellow and white, type -c ryw.\n"
"		- if you want input colors to be black and white, type -c dw\n"
"\n"
"#hist\n"
"Use case:\n"
"	<app-name> hist <filename> [args..]\n"
"\n"
"	-r: color histogram of red channel\n"
"	-b: color histogram of blue channel\n"
"	-g: color histogram of green channel\n"
"	-l: luminance histogram\n"
"\n";